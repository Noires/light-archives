name: Deploy Client
run-name: Released latest version of client to VM.
on:
  workflow_dispatch:
  push:
    branches:
      - 'releases/**'
jobs:
  build-and-deploy-client:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js environment
        uses: actions/setup-node@v3.5.1
        with:
          node-version: 18.12.1
      - name: Yarn Setup
        # You may pin to the exact commit or the version.
        # uses: DerYeger/yarn-setup-action@f55be5383ea94f5eb25b20aee609af4603a68dde
        uses: DerYeger/yarn-setup-action@v1.0.1
        with:
          # The version of Node.js that will be used
          node-version: 18.12.1
      - name: Yarn Client
        run: |
          yarn --cwd ./client 
      - name: Yarn Server
        run: |
          yarn --cwd ./server 
      - name: Yarn Client-Common
        run: |
          yarn --cwd ./client-common 
      - name: Install Quasar
        run: |
          npm i -g @quasar/cli
      - name: Quasar Build
        working-directory: ./client
        run: |
          quasar build
      - name: Copy via ssh
        # You may pin to the exact commit or the version.
        # uses: garygrossgarten/github-action-scp@8a27854bb4f124a497a67316e83783efda770119
        uses: garygrossgarten/github-action-scp@v0.8.0
        with:
          # Path to the local folder you want to copy.
          local: ./client/dist
          # Path on the remote server to copy to.
          remote: /var/www/archive
          # Determines if files with  leading dot (.) on folder copy is included
          dotfiles: true
          # If it is a directory, remote files in it will be deleted before the copy is started.
          rmRemote: true
          # Hostname or IP address of the server.
          host: ${{ secrets.LIGHT_ARCHIVES_HOST }}
          # Port of the server.
          port: ${{ secrets.LIGHT_ARCHIVES_PORT }}
          # Username for authentication.
          username: ${{ secrets.LIGHT_ARCHIVES_USERNAME }}
          # File Location or string that contains a private key for either key-based or hostbased user authentication (OpenSSH format)
          privateKey: ${{ secrets.LIGHT_ARCHIVES_PRIVATESSHKEY }}
          # Upload files to temporary file first, then rename once upload completed
          atomicPut: true

